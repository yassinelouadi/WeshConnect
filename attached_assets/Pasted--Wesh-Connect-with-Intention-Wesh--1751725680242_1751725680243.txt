
🧠 الاسم:
Wesh – Connect with Intention

🎯 الرؤية العامة:
تطبيق Wesh هو منصة مواعدة ذكية تهدف إلى خلق تجارب تواصل حقيقية وآمنة، مبني باستخدام تقنيات حديثة (React + Vite + Tailwind + TypeScript + Firebase أو Node.js backend).

🧱 أقسام التطبيق الرئيسية:
1. شاشة البداية (Landing Page):
شعار Wesh.

زر "ابدأ الآن" / "تسجيل الدخول".

خلفية جذابة وتحريك لقلب ثلاثي الأبعاد (مثل القلب في مشروع "نَسمة").

2. المصادقة (Authentication):
صفحات:
✅ تسجيل الدخول (Login).

✅ التسجيل (Register).

⬛ نسيت كلمة السر (اختياري).

الوظائف:
تسجيل بالبريد الإلكتروني وكلمة السر.

تسجيل عبر Google / Apple / Facebook (OAuth).

حفظ الجلسة في localStorage.

3. صفحة الملف الشخصي (User Profile):
صورة المستخدم.

العمر، الموقع، الاهتمامات، وصف قصير.

تعديل الملف الشخصي.

إضافة صور إضافية.

4. نظام الـMatching (المطابقة):
عرض صور المستخدمين واحدًا تلو الآخر (Swiping).

زر إعجاب ❤️ أو تخطي ❌.

عند الإعجاب المتبادل يتم فتح دردشة.

5. الدردشة (Chat System):
قائمة المحادثات.

صفحة محادثة فردية (Real-time chat).

إشعارات وصول الرسائل.

صور، إيموجي، إرسال صوتيات (في النسخة المتقدمة).

6. إعدادات (Settings):
اللغة (عربي / إنجليزي / فرنسي).

الوضع الليلي.

إشعارات.

الحظر / الحذف.

7. إدارة الاشتراكات (Monetization):
خطة الدفع:
🆓 الخطة المجانية:

عدد محدود من الإعجابات يوميًا.

دردشة محدودة.

💎 Wesh Premium:

إعجابات غير محدودة.

إمكانية التراجع عن "رفض".

رؤية من أعجب بك.

إظهار حسابك أولًا في المدينة.

طرق الدفع:
Stripe (بطاقات بنكية).

Apple Pay / Google Pay.

Paypal.

🔧 الجانب التقني:
المجال	التفاصيل
الواجهة الأمامية	React + TypeScript + Vite
التنسيق	TailwindCSS
المصادقة	Firebase Auth أو JWT
قاعدة البيانات	Firebase Firestore أو MongoDB
نظام إشعارات	Firebase Cloud Messaging
Real-time Chat	Firebase / Socket.IO
الدفع	Stripe API أو باي بال
التخزين	Firebase Storage للصور

🗂️ هيكل المجلدات (المقترح):
arduino
Copy
Edit
client/
├── public/
│   └── heart.png
├── src/
│   ├── assets/
│   ├── components/
│   ├── contexts/
│   │   └── AuthContext.tsx
│   ├── hooks/
│   ├── layouts/
│   ├── pages/
│   │   ├── HomePage.tsx
│   │   ├── LoginPage.tsx
│   │   └── RegisterPage.tsx
│   ├── services/
│   │   └── api.ts
│   ├── App.tsx
│   └── main.tsx
├── tailwind.config.ts
├── vite.config.ts
└── postcss.config.js
📋 ملاحظات مهمة للدكا (المطور في Replit):
البيئة المستهدفة: Windows.

استخدم Replit + GitHub لسهولة المشاركة.

قاعدة البيانات يجب أن تكون Cloud-based.

التطبيق يجب أن يعمل في متصفح الهاتف بسهولة.

كل الشيفرة تكون نظيفة، منظمة، وقابلة للتوسعة.

تنبيه: تأكد أن ملفات التكوين vite.config.ts, tailwind.config.ts, postcss.config.js كلها متوافقة مع نظام TypeScript.